searchState.loadedDescShard("embedded_hal_bus", 0, "crates.io crates.io Documentation Minimum Supported Rust …\n<code>I2c</code> shared bus implementations.\n<code>SpiDevice</code> implementations.\n<code>critical-section</code>-based shared bus <code>I2c</code> implementation.\n<code>RefCell</code>-based shared bus <code>I2c</code> implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>RefCellDevice</code>.\nCreate a new <code>CriticalSectionDevice</code>.\n<code>critical-section</code>-based shared bus <code>SpiDevice</code> implementation.\nAsserting or deasserting CS failed.\nError type for <code>ExclusiveDevice</code> operations.\n<code>SpiDevice</code> implementation with exclusive access to the bus …\nDummy <code>DelayNs</code> implementation that panics on use.\n<code>RefCell</code>-based shared bus <code>SpiDevice</code> implementation.\nAn inner SPI bus operation failed.\nReturns a reference to the underlying bus object.\nReturns a mutable reference to the underlying bus object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ExclusiveDevice</code>.\nCreate a new <code>RefCellDevice</code>.\nCreate a new <code>CriticalSectionDevice</code>.\nCreate a new <code>ExclusiveDevice</code> without support for …\nCreate a new <code>RefCellDevice</code> without support for …\nCreate a new <code>CriticalSectionDevice</code> without support for …")