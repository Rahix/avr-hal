(function() {
    var type_impls = Object.fromEntries([["atmega_hal",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ErrorType-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#340-347\">Source</a><a href=\"#impl-ErrorType-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#349\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>Error type.</div></details></div></details>","ErrorType","atmega_hal::spi::Spi"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#203-209\">Source</a><a href=\"#impl-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#218-225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"avr_hal_generic/spi/struct.Spi.html#tymethod.new\" class=\"fn\">new</a>(\n    p: SPI,\n    sclk: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, SCLKPIN&gt;,\n    mosi: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, MOSIPIN&gt;,\n    miso: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Input.html\" title=\"struct atmega_hal::port::mode::Input\">Input</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.PullUp.html\" title=\"struct atmega_hal::port::mode::PullUp\">PullUp</a>&gt;, MISOPIN&gt;,\n    cs: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, CSPIN&gt;,\n    settings: <a class=\"struct\" href=\"atmega_hal/spi/struct.Settings.html\" title=\"struct atmega_hal::spi::Settings\">Settings</a>,\n) -&gt; (<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;, <a class=\"struct\" href=\"atmega_hal/spi/struct.ChipSelectPin.html\" title=\"struct atmega_hal::spi::ChipSelectPin\">ChipSelectPin</a>&lt;CSPIN&gt;)</h4></section></summary><div class=\"docblock\"><p>Instantiate an SPI with the registers, SCLK/MOSI/MISO/CS pins, and settings,\nwith the internal pull-up enabled on the MISO pin.</p>\n<p>The pins are not actually used directly, but they are moved into the struct in\norder to enforce that they are in the correct mode, and cannot be used by anyone\nelse while SPI is active.  CS is placed into a <code>ChipSelectPin</code> instance and given\nback so that its output state can be changed as needed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_external_pullup\" class=\"method\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#245-252\">Source</a><h4 class=\"code-header\">pub fn <a href=\"avr_hal_generic/spi/struct.Spi.html#tymethod.with_external_pullup\" class=\"fn\">with_external_pullup</a>(\n    p: SPI,\n    sclk: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, SCLKPIN&gt;,\n    mosi: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, MOSIPIN&gt;,\n    miso: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Input.html\" title=\"struct atmega_hal::port::mode::Input\">Input</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Floating.html\" title=\"struct atmega_hal::port::mode::Floating\">Floating</a>&gt;, MISOPIN&gt;,\n    cs: <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, CSPIN&gt;,\n    settings: <a class=\"struct\" href=\"atmega_hal/spi/struct.Settings.html\" title=\"struct atmega_hal::spi::Settings\">Settings</a>,\n) -&gt; (<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;, <a class=\"struct\" href=\"atmega_hal/spi/struct.ChipSelectPin.html\" title=\"struct atmega_hal::spi::ChipSelectPin\">ChipSelectPin</a>&lt;CSPIN&gt;)</h4></section></summary><div class=\"docblock\"><p>Instantiate an SPI with the registers, SCLK/MOSI/MISO/CS pins, and settings,\nwith an external pull-up on the MISO pin.</p>\n<p>The pins are not actually used directly, but they are moved into the struct in\norder to enforce that they are in the correct mode, and cannot be used by anyone\nelse while SPI is active.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reconfigure\" class=\"method\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#267\">Source</a><h4 class=\"code-header\">pub fn <a href=\"avr_hal_generic/spi/struct.Spi.html#tymethod.reconfigure\" class=\"fn\">reconfigure</a>(\n    &amp;mut self,\n    settings: <a class=\"struct\" href=\"atmega_hal/spi/struct.Settings.html\" title=\"struct atmega_hal::spi::Settings\">Settings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"nb/enum.Error.html\" title=\"enum nb::Error\">Error</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Reconfigure the SPI peripheral after initializing</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.release\" class=\"method\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#277-286\">Source</a><h4 class=\"code-header\">pub fn <a href=\"avr_hal_generic/spi/struct.Spi.html#tymethod.release\" class=\"fn\">release</a>(\n    self,\n    cs: <a class=\"struct\" href=\"atmega_hal/spi/struct.ChipSelectPin.html\" title=\"struct atmega_hal::spi::ChipSelectPin\">ChipSelectPin</a>&lt;CSPIN&gt;,\n) -&gt; (SPI, <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, SCLKPIN&gt;, <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, MOSIPIN&gt;, <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Input.html\" title=\"struct atmega_hal::port::mode::Input\">Input</a>, MISOPIN&gt;, <a class=\"struct\" href=\"avr_hal_generic/port/struct.Pin.html\" title=\"struct avr_hal_generic::port::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"atmega_hal/port/mode/struct.Output.html\" title=\"struct atmega_hal::port::mode::Output\">Output</a>, CSPIN&gt;)</h4></section></summary><div class=\"docblock\"><p>Disable the SPI device and release ownership of the peripheral\nand pins.  Instance can no-longer be used after this is\ninvoked.</p>\n</div></details></div></details>",0,"atmega_hal::spi::Spi"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SpiBus-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#352-359\">Source</a><a href=\"#impl-SpiBus-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"trait\" href=\"embedded_hal/spi/trait.SpiBus.html\" title=\"trait embedded_hal::spi::SpiBus\">SpiBus</a> for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#361\">Source</a><a href=\"#method.flush\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.flush\" class=\"fn\">flush</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>&gt;::<a class=\"associatedtype\" href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_hal::spi::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Wait until all operations have completed and the bus is idle. <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#369\">Source</a><a href=\"#method.read\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.read\" class=\"fn\">read</a>(\n    &amp;mut self,\n    read: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>&gt;::<a class=\"associatedtype\" href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_hal::spi::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Read <code>words</code> from the slave. <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#382\">Source</a><a href=\"#method.write\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.write\" class=\"fn\">write</a>(\n    &amp;mut self,\n    write: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>&gt;::<a class=\"associatedtype\" href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_hal::spi::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write <code>words</code> to the slave, ignoring all the incoming words. <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transfer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#394\">Source</a><a href=\"#method.transfer\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.transfer\" class=\"fn\">transfer</a>(\n    &amp;mut self,\n    read: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>],\n    write: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>&gt;::<a class=\"associatedtype\" href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_hal::spi::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write and read simultaneously. <code>write</code> is written to the slave on MOSI and\nwords received on MISO are stored in <code>read</code>. <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.transfer\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transfer_in_place\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#410\">Source</a><a href=\"#method.transfer_in_place\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.transfer_in_place\" class=\"fn\">transfer_in_place</a>(\n    &amp;mut self,\n    buffer: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, &lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"embedded_hal/spi/trait.ErrorType.html\" title=\"trait embedded_hal::spi::ErrorType\">ErrorType</a>&gt;::<a class=\"associatedtype\" href=\"embedded_hal/spi/trait.ErrorType.html#associatedtype.Error\" title=\"type embedded_hal::spi::ErrorType::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Write and read simultaneously. The contents of <code>words</code> are\nwritten to the slave, and the received words are stored into the same\n<code>words</code> buffer, overwriting it. <a href=\"embedded_hal/spi/trait.SpiBus.html#tymethod.transfer_in_place\">Read more</a></div></details></div></details>","SpiBus","atmega_hal::spi::Spi"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_spi_FullDuplex%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#315-322\">Source</a><a href=\"#impl-_embedded_hal_spi_FullDuplex%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"trait\" href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html\" title=\"trait atmega_hal::prelude::_embedded_hal_spi_FullDuplex\">FullDuplex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3><div class=\"docblock\"><p>FullDuplex trait implementation, allowing this struct to be provided to\ndrivers that require it for operation.  Only 8-bit word size is supported\nfor now.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#327\">Source</a><a href=\"#method.send\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html#tymethod.send\" class=\"fn\">send</a>(\n    &amp;mut self,\n    byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"nb/enum.Error.html\" title=\"enum nb::Error\">Error</a>&lt;&lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html\" title=\"trait atmega_hal::prelude::_embedded_hal_spi_FullDuplex\">FullDuplex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html#associatedtype.Error\" title=\"type atmega_hal::prelude::_embedded_hal_spi_FullDuplex::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Sets up the device for transmission and sends the data</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#334\">Source</a><a href=\"#method.read\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html#tymethod.read\" class=\"fn\">read</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, <a class=\"enum\" href=\"nb/enum.Error.html\" title=\"enum nb::Error\">Error</a>&lt;&lt;<a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; as <a class=\"trait\" href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html\" title=\"trait atmega_hal::prelude::_embedded_hal_spi_FullDuplex\">FullDuplex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html#associatedtype.Error\" title=\"type atmega_hal::prelude::_embedded_hal_spi_FullDuplex::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Reads and returns the response in the data register</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#324\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"atmega_hal/prelude/trait._embedded_hal_spi_FullDuplex.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>An enumeration of SPI errors</div></details></div></details>","FullDuplex<u8>","atmega_hal::spi::Spi"],["<section id=\"impl-Default%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#424-431\">Source</a><a href=\"#impl-Default%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"trait\" href=\"embedded_hal/blocking/spi/transfer/trait.Default.html\" title=\"trait embedded_hal::blocking::spi::transfer::Default\">Default</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3><div class=\"docblock\"><p>Default Transfer trait implementation. Only 8-bit word size is supported for now.</p>\n</div></section>","Default<u8>","atmega_hal::spi::Spi"],["<section id=\"impl-Default%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/avr_hal_generic/spi.rs.html#436-443\">Source</a><a href=\"#impl-Default%3Cu8%3E-for-Spi%3CH,+SPI,+SCLKPIN,+MOSIPIN,+MISOPIN,+CSPIN%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt; <a class=\"trait\" href=\"embedded_hal/blocking/spi/write/trait.Default.html\" title=\"trait embedded_hal::blocking::spi::write::Default\">Default</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"avr_hal_generic/spi/struct.Spi.html\" title=\"struct avr_hal_generic::spi::Spi\">Spi</a>&lt;H, SPI, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;<div class=\"where\">where\n    SPI: <a class=\"trait\" href=\"atmega_hal/spi/trait.SpiOps.html\" title=\"trait atmega_hal::spi::SpiOps\">SpiOps</a>&lt;H, SCLKPIN, MOSIPIN, MISOPIN, CSPIN&gt;,\n    SCLKPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MOSIPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    MISOPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,\n    CSPIN: <a class=\"trait\" href=\"atmega_hal/port/trait.PinOps.html\" title=\"trait atmega_hal::port::PinOps\">PinOps</a>,</div></h3><div class=\"docblock\"><p>Default Write trait implementation. Only 8-bit word size is supported for now.</p>\n</div></section>","Default<u8>","atmega_hal::spi::Spi"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[29256]}